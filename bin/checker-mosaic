#!/bin/sh

###
# Setup colors if supported
###
if test -t 1; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[1;34m'
    GRAY='\033[1;30m'
    NC='\033[0m' # No Color
fi

###
# Define functions
###

function help {
    section "USAGE"
    echo "
    $(basename "$0") [-b=<branch>] [-t=<type>] [-r=<remote>] [-f] [-php=<php_version>] [-h]
    "

    section "OPTIONS"

    describe "-php=<php_version>" "use predefined rulesets for php5 or php7, possible values: 5, 7 (default: 5)"
    describe "-h" "show help"
}

function describe {
    echo -e "${YELLOW}$1${NC}\n\t\t${2}\n"
}

function section {
    echo
    echo -e "${BLUE}$1${NC}"
    echo
}

function skip {
    echo -e "${GRAY}$1${NC}"
}

function command {
    echo
    echo -e "${YELLOW}$1${NC}"
}

function success {
    echo
    echo -e "${GREEN}$1${NC}"
}

function failure {
    echo
    echo -e "${RED}$1${NC}"
}

for ARGUMENT in "$@"
do
    KEY=$(echo $ARGUMENT | cut -f1 -d=)
    VALUE=$(echo $ARGUMENT | cut -f2 -d=)

    case "$KEY" in
        -h)
            help
            exit 0;
            ;;
        -php)
            CS_PHP_VERSION=$VALUE;
            ;;
        *)
            failure "Invalid argument: $KEY"
            help
            exit 1;
            ;;
    esac
done

CS_PHP_VERSION="${CS_PHP_VERSION:-5}"

echo "  php version: $CS_PHP_VERSION"
echo "          fix: $FIX"

DIR="$(pwd)/vendor/banovo/coding-standard"

let "ERROR_COUNT=0"

###
# PHP checks
###

section "PHP CHECKS"

command "Coding Standards"
bin/phpcs -s $(pwd)/src $(pwd)/tests --standard=$DIR/rulesets/php$CS_PHP_VERSION.xml
[ $? -ne 0 ] && let "ERROR_COUNT++"

command "Copy/Paste Detector"
bin/phpcpd $(pwd)/src
[ $? -ne 0 ] && let "ERROR_COUNT++"

command "Mess Detector"
bin/phpmd $(pwd)/src text $DIR/rulesets/pmd.xml
[ $? -ne 0 ] && let "ERROR_COUNT++"

if [ $ERROR_COUNT -ne 0 ] ;
then
    failure "Checking failed. Found $ERROR_COUNT errors"
    exit 1
fi

success "Checking completed"
exit 0
